name: 'Terraform Infrastructure Deployment - Basic'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.6.0

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform Plan and Apply'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Commented out AWS authentication for initial testing
      # Uncomment when OIDC is configured
      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: arn:aws:iam::123456789012:role/github-actions-terraform-role
      #     aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive || true

      - name: Create dummy Terraform files for testing
        run: |
          cat > main.tf << 'EOF'
          # Dummy Terraform configuration for pipeline testing
          terraform {
            required_version = ">= 1.0"
            required_providers {
              aws = {
                source  = "hashicorp/aws"
                version = "~> 5.0"
              }
            }
            # Uncomment backend configuration when ready
            # backend "s3" {
            #   bucket         = "my-terraform-state-bucket"
            #   key            = "ecr/terraform.tfstate"
            #   region         = "us-east-1"
            #   encrypt        = true
            #   dynamodb_table = "terraform-state-lock"
            # }
          }

          provider "aws" {
            region = "us-east-1"
            # Skip credentials for testing
            skip_credentials_validation = true
            skip_requesting_account_id  = true
            skip_metadata_api_check     = true
          }

          # Dummy ECR repository resource
          # resource "aws_ecr_repository" "app" {
          #   name                 = "my-app-repo"
          #   image_tag_mutability = "MUTABLE"
          #   
          #   image_scanning_configuration {
          #     scan_on_push = true
          #   }
          # }

          output "pipeline_test" {
            value = "Pipeline is working! Ready to add real resources."
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan
          terraform show -no-color tfplan > plan_output.txt
        continue-on-error: true

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let planOutput = 'Plan output not available';
            try {
              planOutput = fs.readFileSync('plan_output.txt', 'utf8');
            } catch (error) {
              planOutput = 'Could not read plan output';
            }
            
            const output = #### Terraform Plan ðŸ“– \${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \\\`terraform
            ${planOutput}
            \\\`
            
            </details>
            
            Pushed by: @${{ github.actor }}, Action: \${{ github.event_name }}\`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # Manual approval step - only runs on main branch push
      # Commented out for initial testing
      # - name: Wait for Manual Approval
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   uses: trstringer/manual-approval@v1
      #   with:
      #     secret: ${{ github.TOKEN }}
      #     approvers: your-github-username
      #     minimum-approvals: 1
      #     issue-title: "Approve Terraform Apply to Production"
      #     issue-body: "Please review the terraform plan and approve deployment"

      - name: Terraform Apply (Dry Run)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "âœ… Pipeline validation successful!"
          echo "In production, terraform apply would run here after manual approval"
          echo "Uncomment the apply step when ready to deploy real infrastructure"
          # terraform apply -auto-approve tfplan

      - name: Pipeline Success
        run: |
          echo "ðŸŽ‰ Pipeline completed successfully!"
          echo "Next steps:"
          echo "1. Uncomment AWS authentication"
          echo "2. Configure S3 backend"
          echo "3. Add your real Terraform resources"
          echo "4. Uncomment manual approval step"
          echo "5. Uncomment terraform apply"