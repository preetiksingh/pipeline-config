name: CI - Dummy Project

on:
  push:
    branches: [ "main" ]        
    paths-ignore:
      - 'README.md'
      - '.github/workflows/ci-pipeline.yaml'

permissions:
  id-token: write     # for AWS OIDC
  contents: read

env:
  AWS_REGION: us-west-2                               # 🔧 dummy region
  ECR_REPO: dummy-repo-name                            # 🔧 dummy ECR repo name
  AWS_ACCOUNT_ID: 123456789012                         # 🔧 dummy AWS account ID

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔢 Setup GitVersion
        uses: GitTools/actions/gitversion/setup@v0.9.15
        with:
          versionSpec: 5.10.1

      - name: 🔢 Determine version
        id: gv
        uses: GitTools/actions/gitversion/execute@v0.9.15

      - name: 🧮 Compute tags (version + short SHA)
        id: vars
        run: |
          SHORT_SHA="$(git rev-parse --short HEAD)"
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            VERSION="${{ steps.gv.outputs.SemVer }}"
          else
            VERSION="${{ steps.gv.outputs.MajorMinorPatch }}.${{ steps.gv.outputs.CommitsSinceVersionSource }}${{ steps.gv.outputs.PreReleaseLabelWithDash }}"
          fi
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "${VERSION}" > VERSION_FILE
          echo "✅ Version computed: ${VERSION}"
          echo "✅ Short SHA: ${SHORT_SHA}"

      - name: ☕ Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: ⚙️ Build project with Gradle (dummy)
        uses: gradle/gradle-build-action@v3
        with:
          arguments: build --no-daemon

      - name: 🔐 Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/DummyOIDCRole
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔐 Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🐳 Build & Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile                           # 🔧 adjust if needed
          push: true
          tags: |
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ steps.vars.outputs.version }}
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ steps.vars.outputs.short_sha }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.vars.outputs.version }}

      - name: 🏷️ Push :latest tag (main only)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "📦 Tagging image as :latest"
          docker tag \
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ steps.vars.outputs.version }} \
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:latest

          echo "📤 Pushing :latest image"
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:latest

      - name: 📦 Prepare deployment package
        run: |
          echo "📁 Preparing deployment-package directory"
          mkdir -p deployment-package
          cp -r helm deployment-package/ || true
          cp -r terraform deployment-package/ || true
          cp VERSION_FILE deployment-package/
          tree -a deployment-package || true

      - name: ⬆️ Upload deployment-package artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment-package
          retention-days: 14
